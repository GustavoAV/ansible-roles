---
- name: Uninstall old Docker packages
  ansible.builtin.apt:
    name: "{{ docker_debian_old_pkgs }}"
    state: absent

- name: Add dependencies
  ansible.builtin.apt:
    name: "{{ docker_debian_deps }}"
    state: present
    update_cache: true

- name: Create keyrings directory
  ansible.builtin.file:
    path: /etc/apt/keyrings
    mode: "0755"
    owner: root
    group: root
    state: directory

- name: Check if docker.gpg already exists
  ansible.builtin.stat:
    path: "{{ docker_apt_gpg_file }}"
  register: docker_gpg_file

- name: Run tasks if docker.gpg is absent
  ansible.builtin.include_tasks:
    file: gpg_setup.yml
  when: not docker_gpg_file.stat.exists

- name: Get machine architecture
  ansible.builtin.command:
    cmd: dpkg --print-architecture
  register: docker_dpkg_arch
  changed_when: false

# Gets the proper codename even when running on Ubuntu based (e.g. Linux Mint)
- name: Gets distro codename
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      (
        grep 'UBUNTU_CODENAME=' /etc/os-release || \
        grep 'VERSION_CODENAME=' /etc/os-release
      ) | cut -d= -f2
    executable: /bin/bash
  changed_when: false
  register: docker_distro_codename

- name: Add Docker repository
  ansible.builtin.apt_repository:
    repo: "deb
      [arch={{ docker_dpkg_arch.stdout }} signed-by={{ docker_apt_gpg_file }}]
      {{ docker_base_linux_url }}/ubuntu {{ docker_distro_codename }} stable"
    state: present
  notify: Update apt cache

- name: Apply handlers
  ansible.builtin.meta: flush_handlers
